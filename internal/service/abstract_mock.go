// Code generated by MockGen. DO NOT EDIT.
// Source: abstract.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTester is a mock of Tester interface.
type MockTester struct {
	ctrl     *gomock.Controller
	recorder *MockTesterMockRecorder
}

// MockTesterMockRecorder is the mock recorder for MockTester.
type MockTesterMockRecorder struct {
	mock *MockTester
}

// NewMockTester creates a new mock instance.
func NewMockTester(ctrl *gomock.Controller) *MockTester {
	mock := &MockTester{ctrl: ctrl}
	mock.recorder = &MockTesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTester) EXPECT() *MockTesterMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTester) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTesterMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTester)(nil).Execute))
}

// GetResult mocks base method.
func (m *MockTester) GetResult() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResult indicates an expected call of GetResult.
func (mr *MockTesterMockRecorder) GetResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockTester)(nil).GetResult))
}

// Prepare mocks base method.
func (m *MockTester) Prepare() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare")
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockTesterMockRecorder) Prepare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockTester)(nil).Prepare))
}
